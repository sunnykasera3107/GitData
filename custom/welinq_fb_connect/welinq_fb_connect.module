<?php

/**
 * Implementing hook_menu();
 */
function welinq_fb_connect_menu(){
	$items = array();
	$items['admin/config/welinq/facebook'] = array(
		'title' => t('Facebook Connect Settings'),
  		'type' => MENU_NORMAL_ITEM,
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array('welinq_fb_connect_settings_form'),
  		'access arguments' => array('welinq facebook settings')
	);
	$items['welinq/fb/get_data'] = array(
		'title' => t('Welinq Facebook Get Data'),
		'type' => MENU_CALLBACK,
		'page callback' => 'welinq_fb_get_data',
		'access callback' => TRUE
	);
	$items['admin/config/welinq/facebook/field_setup'] = array(
		'title' => t('Facebook field setup'),
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'welinq_fb_connect_field_setup_form',
		'access arguments' => array('welinq facebook settings')
	);
	$items['welinq/facebook/login/%'] = array(
		'title' => t('Facebook Login'),
		'type' => MENU_CALLBACK,
		'page callback' => 'welinq_fb_connect_login',
		'page arguments' => array(3),
		'access callback' => TRUE
	);
	return $items;
}

/**
 * Implementing hook_permission()
 */
function welinq_fb_connect_permission(){
	return array(
		'welinq facebook settings' => array(
			'title' => t('Welinq Facebook Settings'),
			'description' => t('Welinq Facebook Settings permission for admin.')
		),
	);
}

/**
 * function welinq_fb_connect_settings_form()
 * Facebook setting form. 
 */
function welinq_fb_connect_settings_form($form, &$form_state){
	$form = array();
	$form['#tree'] = TRUE;
	$data = variable_get('participants', array());
	if(empty($data) || !isset($data['num_of_form'])){
		$data['num_of_form'] = 0;
	}
	$form_state['storage']['participants'] = isset($form_state['storage']['participants']) ? $form_state['storage']['participants'] : ($data['num_of_form']-1);
	$form['fb_app_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Application ID'),
		'#required' => TRUE,
		'#default_value' => variable_get('fb_app_id', '1414661095495461')
	);
	$form['fb_show_on_login_page'] = array(
		'#type' => 'checkbox',
		'#title' => t('Activate on Login page'),
		'#default_value' => variable_get('fb_show_on_login_page', true)
	);
	$form['fb_show_on_login_block'] = array(
		'#type' => 'checkbox',
		'#title' => t('Activate on Login block'),
		'#default_value' => variable_get('fb_show_on_login_block', true)
	);
	$form['participants'] = array(
		'#type' => 'container',
		'#tree' => TRUE,
		'#prefix' => '<div id="participants">',
		'#suffix' => '</div>',
	);
	if ($form_state['storage']['participants']){
		for ($i = 1; $i <= $form_state['storage']['participants']; $i++) {
			$form['participants'][$i] = array(
				'#type' => 'fieldset',
				'#tree' => TRUE,
			);
			$form['participants'][$i]['form_id'] = array(
				'#title' => t('Form ID'),
				'#type' => 'textfield',
				'#default_value' => $data[$i]['form_id']
			);
			$form['participants'][$i]['remove_form_id'] = array(
				'#type' => 'checkbox',
				'#default_value' => 0,
				'#title' => t('Remove')
			);
		}
	}
	$form['add_form_id'] = array(
		'#type' => 'button',
		'#value' => t('Add more form ID'),
		'#href' => '',
		'#ajax' => array(
			'callback' => 'welinq_fb_connect_add_more_form_id',
			'wrapper' => 'participants',
		),
	);
	$form_state['storage']['participants']++;
	$form['participants']['num_of_form'] = array(
		'#type' => 'hidden',
		'#value' => $form_state['storage']['participants']
	);
	welinq_fb_connect_include_css();
	$form = system_settings_form($form);
	$form['#submit'][] = 'welinq_fb_connect_system_settings_form_submit';
	return $form;
}

/**
 * function welinq_fb_connect_add_more_form_id();
 * Adding more fields.
 */
function welinq_fb_connect_add_more_form_id($form, &$form_state) {
  return $form['participants'];
}

/**
 * function welinq_fb_connect_system_settings_form_submit();
 * System setting submit callback.
 */
function welinq_fb_connect_system_settings_form_submit($form, &$form_state) {
	$i = 1;
	foreach($form_state['values']['participants'] as $key => $data){
		if($data['remove_form_id']==1){
			unset($form_state['values']['participants'][$key]);
		}else{
			$form_state['values']['participants'][$i] = $form_state['values']['participants'][$key];
			$i++;
		}
	}
	$form_state['values']['participants']['num_of_form'] = $i;
	variable_set('participants', $form_state['values']['participants']);
}

/**
 * Implementing hook_form_FORM_ID_alter()
 */
function welinq_fb_connect_form_user_login_block_alter(&$form, &$form_state){
	$fb_login = variable_get('fb_show_on_login_block');
	if($fb_login){
		welinq_fb_connect_include_js();
		$form['welinq_fb_connect'] = array(
			'#markup' => '<fb:login-button scope="public_profile,email" onlogin="checkLoginState();"></fb:login-button>',
		);
	}
}

/**
 * Implementing hook_form_FORM_ID_alter()
 */
function welinq_fb_connect_form_user_login_alter(&$form, &$form_state){
	$fb_login = variable_get('fb_show_on_login_page');
	if($fb_login){
		welinq_fb_connect_include_js();
		$form['welinq_fb_connect'] = array(
			'#markup' => '<fb:login-button scope="public_profile,email" onlogin="checkLoginState();"></fb:login-button>',
		);
	}
}

function welinq_fb_connect_form_alter(&$form, &$form_state, $form_id){
	$form_ids = variable_get('participants');
	foreach($form_ids as $key => $value){
		if($value['form_id']==$form_id){
			welinq_fb_connect_include_js();
			$form['welinq_fb_connect'] = array(
				'#markup' => '<fb:login-button scope="public_profile,email" onlogin="checkLoginState();"></fb:login-button>',
			);
		}
	}
}

/**
 * function welinq_fb_connect_include_js();
 * Including facebook connect js.
 */
function welinq_fb_connect_include_js(){
	global $base_url;
	$path = $base_url.'/'.drupal_get_path('module', 'welinq_fb_connect');
	drupal_add_js($path.'/js/welinq_fb_connect.js', array('type' => 'file', 'scope' => 'footer', 'group' => JS_THEME));
}

/**
 *
 */
function welinq_fb_connect_include_css(){
	global $base_url;
	$path = $base_url.'/'.drupal_get_path('module', 'welinq_fb_connect');
	drupal_add_css($path.'/css/welinq_fb_connect.css');
}

/**
 * function welinq_fb_get_data()
 * Inserting facebook data in the database.
 */
function welinq_fb_get_data(){
	if(isset($_REQUEST['id'])){
		if(($fb_data = welinq_fb_connect_fetch_entry($_REQUEST['id']))){
			if($fb_data[0]->token_used){
				echo $fb_data = welinq_fb_connect_linq_user($_REQUEST, 'login', $fb_data);
			}else{
				echo $fb_data[0]->token;
			}
		}else{
			$fb_data = welinq_fb_connect_linq_user($_REQUEST);
			echo $fb_data;
		}
	}else{
		echo '';
	}
	drupal_exit();
}

/**
 * function welinq_fb_connect_fetch_entry()
 * Fetching entry of facebook account from welinq_fb_connect table based on facebook_id.
 */
function welinq_fb_connect_fetch_entry($facebook_id = NULL, $token = NULL){
	
	if($facebook_id == NULL){
		return false;
	}

	if($facebook_id){
		$entry_query = db_query("SELECT * FROM {welinq_fb_connect} WHERE facebook_id = :facebook_id ORDER BY welinq_fb_id DESC LIMIT 1", array(':facebook_id' => $facebook_id));
		$entry_data = $entry_query->fetchAll();
		if(empty($entry_data)){
			return false;
		}else{
			return $entry_data;
		}
	}else{
		$entry_query = db_query("SELECT * FROM {welinq_fb_connect}");
		$entry_data = $entry_query->fetchAll();
		watchdog('MultipleFBID', '<pre>'.print_r($entry_data, true).'</pre>');
	}
	return $entry_data;
}

/**
 * function welinq_fb_connect_linq_user()
 * Insert user data in welinq_fb_connect table and linq user with facebook account.
 */
function welinq_fb_connect_linq_user($data = array(), $type = 'register', $fb_data = NULL){
	global $user;
	if($user->uid){
		$data['uid'] = $user->uid;
	}else{
		if($type=='login'){
			$data['uid'] = $fb_data[0]->uid;
		}else{
			$data['uid'] = welinq_fb_connect_create_new_user($data);
		}
	}
	$field_values = array(
		'facebook_id' => $data['id'],
		'link' => $data['link'],
		'uid' => $data['uid'],
		'token' => hash('sha256', $data['id'].time()),
		'token_used' => 0,
		'created' => time()
	);
	$id = db_insert('welinq_fb_connect')
			->fields($field_values)
			->execute();
	return $field_values['token'];

}

/**
 * function welinq_fb_connect_create_new_user();
 * Creating new user on request.
 */
function welinq_fb_connect_create_new_user($user_data = array()){
	//Generating new password of 8 char.
	$password = user_password(8);
	$fields = array(
		'name' => $user_data['name'],
		'mail' => (isset($user_data['email'])?$user_data['email']:''),
		'pass' => $password,
		'status' => 1,
		'init' => 'email address',
		'roles' => array(
			DRUPAL_AUTHENTICATED_RID => 'authenticated user',
		),
	);
	$account = user_save('', $fields);
	return $account->uid;
}

/**
 * function welinq_fb_connect_test();
 * Test the fb connect.
 */
function welinq_fb_connect_field_setup_form($form, &$form_state){
	$form = array();
	
	// $registration_form = field_info_instances('user');
	// $profile2 = field_info_instances('profile2');
	// print_r($profile2);
	// print_r($registration_form); die;
}

/**
 * function welinq_fb_connect_login();
 * Getting user login with facebook with the unique token.
 */
function welinq_fb_connect_login($token){
	global $user;
	$fetched_data = db_select('welinq_fb_connect', 'fb')
		->fields('fb', array('uid', 'welinq_fb_id'))
		->condition('token', $token)
		->condition('token_used', 0)
		->execute()
		->fetchAll();
	if(!empty($fetched_data)){
		$updated = db_update('welinq_fb_connect')
				->fields(array('token_used' => 1))
				->condition('welinq_fb_id', $fetched_data[0]->welinq_fb_id, '=')
				->execute();
		$user = user_load($fetched_data[0]->uid);
		$login_array = array ('name' => $user->name);
		user_login_finalize($login_array);
	}
	drupal_goto('user');
	drupal_exit();
}